import java.util.Arrays;

public class QuickSort {
    
    /**
     * 快速排序主方法
     * @param arr 待排序数组
     * @param low 起始索引
     * @param high 结束索引
     */
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // 获取分区索引
            int pivotIndex = partition(arr, low, high);
            
            // 递归排序左半部分
            quickSort(arr, low, pivotIndex - 1);
            
            // 递归排序右半部分
            quickSort(arr, pivotIndex + 1, high);
        }
    }
    
    /**
     * 分区方法，将数组分为两部分
     * @param arr 数组
     * @param low 起始索引
     * @param high 结束索引
     * @return 分区索引
     */
    private static int partition(int[] arr, int low, int high) {
        // 选择最后一个元素作为基准
        int pivot = arr[high];
        
        // 较小元素的索引
        int i = low - 1;
        
        for (int j = low; j < high; j++) {
            // 如果当前元素小于或等于基准
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        
        // 将基准元素放到正确位置
        swap(arr, i + 1, high);
        return i + 1;
    }
    
    /**
     * 交换数组中两个元素的位置
     * @param arr 数组
     * @param i 第一个元素索引
     * @param j 第二个元素索引
     */
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
    /**
     * 打印数组
     * @param arr 数组
     */
    public static void printArray(int[] arr) {
        System.out.println(Arrays.toString(arr));
    }
    
    /**
     * 主方法，测试快速排序
     */
    public static void main(String[] args) {
        int[] arr = {64, 34, 25, 12, 22, 11, 90, 88, 76, 50, 42};
        
        System.out.println("原始数组:");
        printArray(arr);
        
        // 执行快速排序
        quickSort(arr, 0, arr.length - 1);
        
        System.out.println("排序后数组:");
        printArray(arr);
        
        // 性能测试
        System.out.println("\n=== 性能测试 ===");
        int[] largeArr = generateRandomArray(10000);
        
        long startTime = System.currentTimeMillis();
        quickSort(largeArr, 0, largeArr.length - 1);
        long endTime = System.currentTimeMillis();
        
        System.out.println("排序10000个元素耗时: " + (endTime - startTime) + "毫秒");
    }
    
    /**
     * 生成随机数组用于测试
     * @param size 数组大小
     * @return 随机数组
     */
    private static int[] generateRandomArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = (int) (Math.random() * 1000);
        }
        return arr;
    }
}